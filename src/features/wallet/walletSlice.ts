import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk, DI } from '../../app/store';
import { generateUrl, check } from './walletApi';
import { switchNetwork } from '@wagmi/core'
import { erc20 } from '@openzeppelin/wizard';

// import erc20Sol from "../../@openzeppelin/contracts/token/ERC20/ERC20.sol"
import {
  Solc,
  ImportCallbackFn,
  ImportCallbackReturnType,
} from "solc-browserify";

export interface Wallet {
  check: boolean;
  uri: string;
  code: string;
}

const initialState: Wallet = {
  check: false,
  code: "",
  uri: "",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const generateUri = createAsyncThunk(
  'wallet/generateUri',
  async (chainId: number, { getState, extra, dispatch}) => {
    const uri = await generateUrl()
    dispatch(setUri(uri))
  }
);



export const deployERC20 = createAsyncThunk(
  'wallet/check',
  async (code: string, { getState, extra, dispatch}) => {
    const uri = await check(code)
    dispatch(setCheck(uri))
  }
);

export const configDashboard = createSlice({
  name: 'wallet',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setUri: (state, action: PayloadAction<string>) => {
      state.uri = action.payload
    },
    setCheck: (state, action: PayloadAction<boolean>) => {
      state.check = action.payload
    },
    setCode: (state, action: PayloadAction<string>) => {
      state.code = action.payload
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {    
  },
});

export const { setUri, setCheck, setCode } = configDashboard.actions;

export const selectUri = (state: RootState) => state.wallet.uri;
export const selectCheck = (state: RootState) => state.wallet.check;
export const selectCode = (state: RootState) => state.wallet.code;

export default configDashboard.reducer;
