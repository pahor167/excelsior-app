import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk, DI } from '../../app/store';
import { deployContractReal, fetchCount } from './configDashboardApi';
import { DeployPayload } from './actionInterface';

export interface ConfigDashBoard {
  name: string;
  amount: string,
  status: 'idle' | 'loading' | 'failed';
}

const initialState: ConfigDashBoard = {
  name: "",
  amount: "0",
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const deployContract = createAsyncThunk(
  'configDashboard/deploy',
  async (amount: number, { getState, extra}) => {
    const state = getState() as RootState
    const di = extra as DI
    console.log(di.hello())
    await deployContractReal(state.configDashboard.name, state.configDashboard.amount)
    // const response = await fetchCount(amount);
    // // The value we return becomes the `fulfilled` action payload
    // return response.data;
  }
);

export const configDashboard = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setAmount: (state, action: PayloadAction<string>) => {
      state.amount = action.payload
    },
    setName: (state, action: PayloadAction<string>) => {
      state.name = action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {    
  },
});

export const { setAmount, setName } = configDashboard.actions;

export const selectName = (state: RootState) => state.configDashboard.name;
export const selectAmount = (state: RootState) => state.configDashboard.amount.toString()

export default configDashboard.reducer;
